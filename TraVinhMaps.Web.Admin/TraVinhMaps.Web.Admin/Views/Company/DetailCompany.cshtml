@using TraVinhMaps.Web.Admin.Models.Company
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model CompanyResponse
@{
    ViewData["Title"] = "Company Details";
    var breadcrumbs = new List<BreadcrumbItem>
{
new BreadcrumbItem { Title = "Company", Url = "/Admin/Company" },
new BreadcrumbItem { Title = "Details", Url = "#" }
};
    ViewData["Breadcrumb"] = breadcrumbs;
}

<style>
    .main-panel {
        padding: 2rem;
    }

    .company-header {
        background-color: #4CAF50;
        /* Green background */
        color: white;
        padding: 30px 40px;
        border-radius: 25px;
        margin-bottom: 30px;
        position: relative;
        overflow: hidden;
    }

    .company-header::after {
        content: '';
        position: absolute;
        top: -50px;
        right: -50px;
        width: 200px;
        height: 200px;
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 50%;
    }

    .company-header h1 {
        font-size: 2.2rem;
        font-weight: 700;
        margin: 0;
        line-height: 1.2;
    }

    .company-header p {
        font-size: 1rem;
        opacity: 0.9;
        margin-top: 5px;
    }

    .info-card {
        background-color: white;
        border-radius: 12px;
        margin-bottom: 30px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        border-left: 5px solid;
    }

    .info-card-orange {
        border-color: #ffc107;
    }

    .info-card-blue {
        border-color: #0d6efd;
    }

    .info-card-green {
        border-color: #198754;
    }

    .info-card-red {
        border-color: #dc3545;
    }

    .info-card .card-body {
        padding: 25px;
    }

    .info-card .card-title-section {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
    }

    .info-card .card-icon {
        width: 48px;
        height: 48px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 15px;
        color: white;
        font-size: 1.5rem;
    }

    .icon-bg-orange {
        background-color: #ffc107;
    }

    .icon-bg-blue {
        background-color: #0d6efd;
    }

    .icon-bg-green {
        background-color: #198754;
    }

    .icon-bg-red {
        background-color: #dc3545;
    }

    .info-card h4 {
        font-size: 1.5rem;
        font-weight: 600;
        margin: 0;
    }

    .info-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        border-bottom: 1px solid #e9ecef;
    }

    .info-item:last-child {
        border-bottom: none;
    }

    .info-item .item-label {
        display: flex;
        align-items: center;
        color: #555;
        flex-basis: 30%;
        /* Adjust as needed */
        flex-shrink: 0;
    }

    .info-item .item-value {
        flex-grow: 1;
        text-align: right;
    }

    .info-item .item-label i {
        margin-right: 10px;
        color: #888;
    }

    .info-item .item-value {
        font-weight: 500;
        color: #333;
        background-color: #f8f9fa;
        padding: 5px 12px;
        border-radius: 6px;
    }

    .item-value.not-updated {
        color: #888;
        font-style: italic;
    }

    .status-badge {
        background-color: #e0f2f1;
        color: #00796b;
        padding: 8px 15px;
        border-radius: 20px;
        font-weight: 500;
        display: inline-block;
    }

    .map-placeholder {
        background-color: #e9ecef;
        border-radius: 8px;
        padding: 40px 20px;
        text-align: center;
        margin-top: 20px;
    }

    .map-placeholder i {
        font-size: 3rem;
        color: #adb5bd;
    }

    .map-placeholder p {
        margin: 10px 0 0;
        font-weight: 500;
        color: #6c757d;
    }

    .alert-warning {
        background-color: #fff3cd;
        border-color: #ffeeba;
        color: #856404;
    }
</style>

<div class="page-body main-panel">
    <div class="container-fluid">
        <!-- Breadcrumb -->
        <div class="page-title">
            <div class="row">
                <div class="col-6">

                </div>
                @if (breadcrumbs != null)
                {
                    @await Html.PartialAsync("_Breadcrumb", breadcrumbs)
                }
            </div>
        </div>

        <!-- Company Header -->
        <div class="company-header">
            <h1 style="color: white;">@Model.Name</h1>
            <p>Professional manufacturing and trading company</p>
        </div>

        <div class="row">   
 
            <!-- Contact Info -->
            <div class="col-xl-12">
                <div class="card info-card info-card-green">
                    <div class="card-body">
                        <div class="card-title-section">
                            <div class="card-icon icon-bg-green"><i class="fa fa-phone"></i></div>
                            <h4>Contact Information</h4>
                        </div>
                        <div class="info-item">
                            <div class="item-label"><i class="fa fa-globe"></i> Website</div>
                            <div
                                class="item-value @(string.IsNullOrEmpty(Model.Contact?.Website) ? "not-updated" : "")">
                                @(string.IsNullOrEmpty(Model.Contact?.Website) ? "Update soon" :
                                                                Model.Contact.Website)
                            </div>
                        </div>
                        <div class="info-item">
                            <div class="item-label"><i class="fa fa-envelope"></i> Email</div>
                                <div class="item-value @(string.IsNullOrEmpty(Model.Contact?.Email) ? "not-updated" : "")">
                                    @(string.IsNullOrEmpty(Model.Contact?.Email) ? "Update soon" : Model.Contact.Email)
                            </div>
                        </div>
                        <div class="info-item">
                            <div class="item-label"><i class="fa fa-phone"></i> Phone Number</div>
                            <div class="item-value @(string.IsNullOrEmpty(Model.Contact?.Phone) ? "not-updated" : "")">
                                @(string.IsNullOrEmpty(Model.Contact?.Phone) ? "Update soon" : Model.Contact.Phone)
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Location Info -->
            @if (Model.Locations != null && Model.Locations.Any())
            {
                var loc = Model.Locations.First(); // Assuming one location for simplicity as per design
                <div class="col-xl-12">
                    <div class="card info-card info-card-red">
                        <div class="card-body">
                            <div class="card-title-section">
                                <div class="card-icon icon-bg-green"><i class="fa fa-compass"></i></div>
                                <h4>Company Location</h4>
                            </div>

                            <div class="info-item">
                                <div class="item-label"><i class="fa fa-map-pin"></i> Company Address</div>
                                <div class="item-value">@Model.Address</div>
                            </div>

                            <div class="info-item" style="display: none;">
                                <div class="item-label"><i class="fa fa-rocket"></i> Location Type</div>
                                <div class="item-value">@loc.Type</div>
                            </div>
                            <div class="info-item">
                                <div class="item-label"><i class="fa fa-globe"></i> Longitude</div>
                                <div class="item-value">@loc.Longitude</div>
                            </div>
                            <div class="info-item">
                                <div class="item-label"><i class="fa fa-globe"></i> Latitude</div>
                                <div class="item-value">@loc.Latitude</div>
                            </div>



                            <div id="mapContainer" style="width: 100%; height: 400px; border-radius: 8px;"></div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="mt-3" style="display: flex; justify-content: flex-end;">
            <a asp-controller="Company" asp-action="UpdateCompany" asp-route-id="@Model.Id" class="btn btn-primary" style="margin-right: 10px;">
                <i class="fa fa-edit"></i> Edit
            </a>
            <a asp-controller="Company" asp-action="Index" class="btn btn-secondary">
                <i class="fa fa-arrow-left"></i> Back
            </a>
        </div>
    </div>
</div>

@section Scripts {
    @Html.AntiForgeryToken()
    <script src="~/assets/js/company/index.js"></script>
    <script src="~/assets/js/sweetalert-custom.js"></script>

    <!-- HERE Maps API -->
    <script src="https://js.api.here.com/v3/3.1/mapsjs-core.js" type="text/javascript" charset="utf-8"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-service.js" type="text/javascript" charset="utf-8"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-ui.js" type="text/javascript" charset="utf-8"></script>
    <link rel="stylesheet" type="text/css" href="https://js.api.here.com/v3/3.1/mapsjs-ui.css" />
    <script src="https://js.api.here.com/v3/3.1/mapsjs-mapevents.js" type="text/javascript" charset="utf-8"></script>

    <script>
        (function () {
            const success = @Html.Raw(Json.Serialize(TempData["Success"]));
            const error = @Html.Raw(Json.Serialize(TempData["Error"]));
            if (success) showSuccessAlert("Success!", success);
            if (error) showErrorAlert("Error!", error);
        })();

        // Initialize Here Map
        @if (Model.Locations != null && Model.Locations.Any())
            {
                var loc = Model.Locations.First();
                <text>
                    (function() {
                        const platform = new H.service.Platform({
                        'apikey': '@Configuration["HEREMAP_API_KEY"]'
                        });

                    const defaultLayers = platform.createDefaultLayers();

                    const map = new H.Map(
                    document.getElementById('mapContainer'),
                    defaultLayers.vector.normal.map,
                    {
                        zoom: 15,
                    center: {lat: @loc.Latitude, lng: @loc.Longitude }
                            }
                    );

                    // Add map events listener
                    const mapEvents = new H.mapevents.MapEvents(map);
                    const behavior = new H.mapevents.Behavior(mapEvents);

                    // Add UI components
                    const ui = H.ui.UI.createDefault(map, defaultLayers);

                // Add a custom marker
                const svgMarkup = '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="26" viewBox="0 0 28 36"><path d="M14 0C6.268 0 0 6.268 0 14c0 10.5 14 22 14 22s14-11.5 14-22C28 6.268 21.732 0 14 0z" fill="#28a745"/><circle cx="14" cy="14" r="6" fill="white"/></svg>';
                const icon = new H.map.Icon(svgMarkup, { anchor: { x: 10, y: 26 } });
                const marker = new H.map.Marker({ lat: @loc.Latitude, lng: @loc.Longitude }, { icon: icon });
                map.addObject(marker);
            })();
                </text>
        }
    </script>
}
@inject IConfiguration Configuration
