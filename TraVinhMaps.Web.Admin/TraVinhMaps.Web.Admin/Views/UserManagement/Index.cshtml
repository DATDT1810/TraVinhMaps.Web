@using TraVinhMaps.Web.Admin.Models.Users;
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model IEnumerable<UserResponse>;
@{
    ViewData["Title"] = "Account List";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var sessionId =  User.Claims.FirstOrDefault(c => c.Type == "sessionId")?.Value;
}
<div class="page-body">
    <div class="container-fluid">
        <div class="page-title">
            <div class="row">
                <div class="col-6">
                    <h4>@ViewData["Title"]</h4>
                </div>
                <div class="col-6">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">
                            <a asp-controller="Home" asp-action="Index">
                                <i class="fa fa-home" style="font-size: 20px;"></i>
                            </a>
                        </li>
                        @if (ViewData["Breadcrumb"] is List<string> breadcrumbs)
                        {
                            foreach (var item in breadcrumbs.Take(breadcrumbs.Count - 1))
                            {
                                <li class="breadcrumb-item">@item</li>
                            }
                            <li class="breadcrumb-item active">@breadcrumbs.Last()</li>
                        }
                    </ol>
                </div>
            </div>
        </div>
    </div>
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-3">
                            <div class="d-flex gap-2 mb-3">
                                <button class="btn btn-primary" id="exportBtn">
                                    <i class="fa fa-file-excel-o me-1"></i>Export
                                </button>
                            </div>
                            <div class="status-filter">
                                <select id="statusFilter" class="form-select">
                                    <option value="all">All</option>
                                    <option value="inactive">Ban (Inactive)</option>
                                </select>
                            </div>

                        </div>
                        <div class="list-users">
                            <table class="display" id="project-status">
                                <thead class="bg-primary">
                                    <tr>
                                        <th>#</th>
                                        <th>Full Name</th>
                                        <th>Email</th>
                                        <th>Phone</th>
                                        <th>Status</th>
                                        <th>Created At</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        int count = 1;
                                    }
                                    @foreach (var item in Model)
                                    {
                                        <tr>
                                            <td>@count</td>
                                            <td>
                                                <div class="product-names">
                                                    <div class="light-product-box">
                                                        <img class="img-fluid"
                                                            src="@(item.UserProfile?.Avatar ?? "/assets/img/default-avatar.png")"
                                                            alt="avatar">
                                                    </div>
                                                    <p>@(item.UserProfile?.FullName ?? "—")</p>
                                                </div>
                                            </td>
                                            <td>@item.Email</td>
                                            <td>@item.PhoneNumber</td>
                                            <td>
                                                <span
                                                    class="badge @(item.Status ? "badge-light-primary" : "badge-light-danger")">
                                                    @(item.Status ? "Active" : "Inactive")
                                                </span>
                                            </td>
                                            <td>
                                                @item.CreatedAt.ToLocalTime().ToString("dd/MM/yy, HH:mm")
                                            </td>
                                            <td>
                                            <ul class="action">
                                                <li>
                                                    <a class="details" asp-controller="UserManagement" asp-action="Details"
                                                        asp-route-id="@item.Id" title="Details">
                                                        <i class="fa fa-eye"></i>
                                                    </a>
                                                </li>
                                                <li>
                                                    @if (!item.IsForbidden)
                                                        {
                                                            <a class="delete ban-user" href="javascript:void(0)"
                                                                data-id="@item.Id" title="Ban">
                                                                <i class="fa fa-ban"></i>
                                                            </a>
                                                        }
                                                        else
                                                        {
                                                            <a class="restore unban-user" href="javascript:void(0)"
                                                                data-id="@item.Id" title="Unban">
                                                                <i class="fa fa-unlock"></i>
                                                            </a>
                                                        }
                                                    </li>
                                                </ul>
                                            </td>
                                        </tr>
                                        count++;
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    @Html.AntiForgeryToken()
    <!-- Add SheetJS libraries for Excel export -->
    <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
    <script src="~/assets/js/sweetalert-custom.js"></script>
    <script src="~/assets/js/usermanagement/index.js"></script>
    <script>
        (function () {
            const success = @Html.Raw(Json.Serialize(TempData["Success"]));
            const error   = @Html.Raw(Json.Serialize(TempData["Error"]));
            if (success) showSuccessAlert("Success!", success);
            if (error)   showErrorAlert("Error!",   error);
            
            // Get session ID from page
            const sessionId = "@sessionId";
            
            // Handle Excel export
            $("#exportBtn").on("click", function() {
                exportTableToExcel();
            });
            
            // Function to export table data to Excel
            function exportTableToExcel() {
                // Show loading message
                showInfoAlert("Exporting Data", "Retrieving all user data for export...");
                
                // Fetch all user data directly from the API
                $.ajax({
                    url: 'https://localhost:7162/api/Users/all',
                    type: 'GET',
                    headers: {
                        'sessionId': sessionId
                    },
                    success: function(response) {
                        if (response && response.length > 0) {
                            // Create a workbook
                            const wb = XLSX.utils.book_new();
                            
                            // Create header row with all fields and separate profile fields
                            const headerRow = [
                                '#',
                                'User ID', 
                                'Username', 
                                'Email',
                                'Phone Number',
                                'Role ID',
                                'Status',
                                'Is Forbidden',
                                'Created At',
                                'Updated At',
                                'Password Hash',
                                // Profile fields as separate columns
                                'Full Name',
                                'Date of Birth',
                                'Profile Phone',
                                'Gender',
                                'Address',
                                'Avatar URL',
                                // Other data
                                'Favorites'
                            ];
                            
                            const data = [headerRow];
                            
                            // Process the data from the API
                            response.forEach((user, index) => {
                                // Format favorites if exists
                                let favoritesData = "—";
                                if (user.favorites && user.favorites.length > 0) {
                                    try {
                                        favoritesData = JSON.stringify(user.favorites);
                                    } catch (e) {
                                        favoritesData = "Invalid favorites data";
                                    }
                                }
                                
                                // Extract profile data
                                const profile = user.profile || {};
                                
                                const rowData = [
                                    (index + 1).toString(),
                                    user.id || "—",
                                    user.username || "—",
                                    user.email || "—",
                                    user.phoneNumber || "—",
                                    user.roleId || "—",
                                    user.status ? "Active" : "Inactive",
                                    user.isForbidden ? "Yes" : "No",
                                    user.createdAt ? new Date(user.createdAt).toLocaleString() : "—",
                                    user.updatedAt ? new Date(user.updatedAt).toLocaleString() : "—",
                                    user.password || "—",
                                    // Profile fields as separate values
                                    profile.fullName || "—",
                                    profile.dateOfBirth || "—", 
                                    profile.phoneNumber || "—",
                                    profile.gender || "—",
                                    profile.address || "—",
                                    profile.avatar || "—",
                                    // Other data
                                    favoritesData
                                ];
                                data.push(rowData);
                            });
                            
                            // Create worksheet from data
                            const ws = XLSX.utils.aoa_to_sheet(data);
                            
                            // Set column widths for better readability
                            ws['!cols'] = [
                                { wch: 5 },    // #
                                { wch: 25 },   // User ID
                                { wch: 20 },   // Username
                                { wch: 30 },   // Email
                                { wch: 15 },   // Phone
                                { wch: 25 },   // Role ID
                                { wch: 10 },   // Status
                                { wch: 12 },   // Is Forbidden
                                { wch: 20 },   // Created At
                                { wch: 20 },   // Updated At
                                { wch: 70 },   // Password Hash
                                // Profile field widths
                                { wch: 25 },   // Full Name
                                { wch: 15 },   // Date of Birth
                                { wch: 15 },   // Profile Phone
                                { wch: 10 },   // Gender
                                { wch: 50 },   // Address
                                { wch: 70 },   // Avatar URL
                                // Other data
                                { wch: 50 }    // Favorites
                            ];
                            
                            // Add the worksheet to the workbook
                            XLSX.utils.book_append_sheet(wb, ws, "User List");
                            
                            // Generate Excel file and trigger download
                            const today = new Date().toISOString().slice(0, 10);
                            const fileName = `user_list_${today}.xlsx`;
                            XLSX.writeFile(wb, fileName);

                            
                            setTimeout(() => {
                                showSuccessAlert("Export Successful", `${response.length} Items have been exported to Excel.`);
                            }, 3000);
                            
                            // showSuccessAlert("Export Successful", `${response.length} Items have been exported to Excel.`);
                        } else {
                            showErrorAlert("Export Error", "No user data available for export.");
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error("Error fetching user data:", error);
                        showErrorAlert("Export Error", "Could not retrieve user data. Please check your connection or permissions.");
                    }
                });
            }
        })();
    </script>
}