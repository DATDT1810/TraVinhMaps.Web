﻿@using TraVinhMaps.Web.Admin.Models.OcopProduct;
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model IEnumerable<OcopProductResponse>;
@{
    ViewData["Title"] = "Index";
    var sessionId = User.Claims.FirstOrDefault(c => c.Type == "sessionId")?.Value;
}

<div class="page-body">
    <div class="container-fluid">
        <div class="page-title">
            <div class="row">
                <div class="col-6">
                    <h4>@ViewData["Title"]</h4>
                </div>
                <div class="col-6">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">
                            <a asp-controller="Home" asp-action="Index">
                                <i class="fa fa-home" style="font-size: 20px;"></i>
                            </a>
                        </li>
                        @if (ViewData["Breadcrumb"] is List<string> breadcrumbs)
                        {
                            foreach (var item in breadcrumbs.Take(breadcrumbs.Count - 1))
                            {
                                <li class="breadcrumb-item">@item</li>
                            }
                            <li class="breadcrumb-item active">@breadcrumbs.Last()</li>
                        }
                    </ol>
                </div>
            </div>
        </div>
    </div>
    @if (TempData["ErrorMessage"] != null)
    {
        <div id="alert-message" class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div id="alert-message" class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }
    <!-- Container-fluid starts-->
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-3">
                            <div>
                                <div class="dropdown d-inline-block">
                                    <button class="btn btn-success" type="button" id="createOcopDropdown"
                                        data-bs-toggle="dropdown" aria-expanded="false" style="min-width: 200px;">
                                        <i class="fa fa-plus me-1"></i>Create Ocop Product
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="createOcopDropdown"
                                        style="min-width: 200px;">
                                        <li><a class="dropdown-item py-3 ocop-dropdown-item"
                                                asp-controller="OcopProduct" asp-action="CreateOcopProduct"><i
                                                    class="fa fa-file me-2"></i>Create Single Product</a></li>
                                        <li><a class="dropdown-item py-3 ocop-dropdown-item"
                                                asp-controller="OcopProduct" asp-action="ImportProducts"><i
                                                    class="fa fa-upload me-2"></i>Import Products</a></li>
                                    </ul>
                                </div>
                                <button class="btn btn-primary" id="exportBtn">
                                    <i class="fa fa-file-excel-o me-1"></i>Export
                                </button>
                            </div>
                            <div class="status-filter">
                                <select id="statusFilter" class="form-select">
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                </select>
                            </div>
                        </div>
                        <div class="list-users">
                            <table class="display" id="project-status">
                                <thead class="bg-primary">
                                    <tr>
                                        <th>No.</th>
                                        <th>Product Image</th>
                                        <th>Product Name</th>
                                        <th>Product Price</th>
                                        <th>Status</th>
                                        <th>Ocop Year Release</th>
                                        <th>Created At</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        int count = 1;
                                    }
                                    @foreach (var item in Model)
                                    {
                                        <tr class="user-removes">
                                            <td>@count</td>
                                            <td>
                                                <div class="product-names">
                                                    <div class="light-product-box">
                                                        @if (item.ProductImage != null && item.ProductImage.Any())
                                                        {
                                                            <img class="img-fluid" src="@item.ProductImage[0]"
                                                                alt="image ocop product" />
                                                        }
                                                        else
                                                        {
                                                            <img class="img-fluid" src="/assets/images/no-image.png"
                                                                alt="no image available" />
                                                        }
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            @item.ProductName
                                        </td>

                                        <td class="text-end">
                                            @decimal.Parse(item.ProductPrice).ToString("#,##0")
                                        </td>
                                        <td>
                                            <span
                                                class="badge @(item.Status ? "badge-light-primary" : "badge-light-danger")">
                                                @(item.Status
                                                                                                ? "Active" : "Inactive")
                                            </span>
                                        </td>
                                        <td class="text-end">
                                            @item.OcopYearRelease
                                        </td>

                                            <td>
                                                @item.CreatedAt.ToLocalTime().ToString("dd/MM/yy, HH:mm")
                                            </td>
                                            <td>
                                                <ul class="action">
                                                    <li>
                                                        <a class="details" asp-controller="OcopProduct"
                                                            asp-action="DetailOcopProduct" asp-route-id="@item.Id"
                                                            title="Details">
                                                            <i class="fa fa-eye"></i>
                                                        </a>
                                                    </li>
                                                    <li>
                                                    @if (item.Status == false)
                                                        {
                                                            <a class="restore undelete-ocop-product" href="javascript:void(0)"
                                                                data-id="@item.Id" title="Restore"><i
                                                                    class="fa fa-undo"></i></a>
                                                        }
                                                        else
                                                        {
                                                            <a class="delete delete-ocop-product" href="javascript:void(0)"
                                                                data-id="@item.Id" title="Delete"><i
                                                                    class="fa fa-trash"></i></a>
                                                        }
                                                    </li>

                                                </ul>
                                            </td>
                                        </tr>
                                        count++;
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Container-fluid Ends-->
</div>

@section Scripts {
    @Html.AntiForgeryToken()
    <!-- Add SheetJS libraries for Excel export -->
    <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
    <script src="~/assets/js/sweetalert-custom.js"></script>
    <script src="~/assets/js/ocopproduct/index.js"></script>
    <script>
        (function () {
            const success = @Html.Raw(Json.Serialize(TempData["Success"]));
            const error = @Html.Raw(Json.Serialize(TempData["Error"]));
            if (success) showSuccessAlert("Success!", success);
            if (error) showErrorAlert("Error!", error);

            // Get session ID
            const sessionId = "@sessionId";

            // Handle Excel export button click
            $("#exportBtn").on("click", function () {
                exportOcopProductsToExcel();
            });

            // Function to export OCOP products to Excel
            function exportOcopProductsToExcel() {
                // Show loading message
                showInfoAlert("Exporting Data", "Retrieving OCOP product data for export...");

                // Debug: Check if sessionId exists
                if (!sessionId) {
                    console.error("Error: sessionId is missing or undefined");
                    showErrorAlert("Export Error", "Session ID is missing. Please log in again.");
                    return;
                }

                // Fetch all OCOP product data from API
                $.ajax({
                    url: 'https://localhost:7162/api/OcopProduct/GetAllOcopProduct',
                    type: 'GET',
                    headers: {
                        'sessionId': sessionId
                    },
                    success: function (response) {
                        console.log("API response received:", response);

                        // Extract products from the data field in the response
                        const products = response.data || [];

                        if (products.length > 0) {
                            try {
                                // Create a workbook
                                const wb = XLSX.utils.book_new();

                                // Create header row with all fields
                                const headerRow = [
                                    '#',
                                    'Product ID',
                                    'Product Name',
                                    'Product Description',
                                    'Product Price',
                                    'Status',
                                    'OCOP Year Release',
                                    'OCOP Point',
                                    'OCOP Type ID',
                                    'Company ID',
                                    'Created At',
                                    'Updated At',
                                    'Tag ID',
                                    'Product Images',
                                    'Sell Locations',
                                    'Coordinates'
                                ];

                                const data = [headerRow];

                                // Process the product data from the API
                                products.forEach((product, index) => {
                                    // Format images array
                                    let imagesStr = "—";
                                    if (product.productImage && product.productImage.length > 0) {
                                        imagesStr = product.productImage.join('\n');
                                    }

                                    // Format sell locations
                                    let sellLocationsStr = "—";
                                    let coordinatesStr = "—";

                                    if (product.sellocations && product.sellocations.length > 0) {
                                        const locationNames = [];
                                        const locationAddresses = [];
                                        const coordinates = [];

                                        product.sellocations.forEach(loc => {
                                            if (loc.locationName) {
                                                locationNames.push(loc.locationName);
                                            }

                                            if (loc.locationAddress) {
                                                locationAddresses.push(loc.locationAddress);
                                            }

                                            if (loc.location && loc.location.coordinates && loc.location.coordinates.length >= 2) {
                                                coordinates.push(`[${loc.location.coordinates[0]}, ${loc.location.coordinates[1]}]`);
                                            }
                                        });

                                        if (locationNames.length > 0) {
                                            const combinedLocations = [];

                                            for (let i = 0; i < locationNames.length; i++) {
                                                combinedLocations.push(`${locationNames[i]}: ${locationAddresses[i] || 'No address'}`);
                                            }

                                            sellLocationsStr = combinedLocations.join('\n');
                                        }

                                        if (coordinates.length > 0) {
                                            coordinatesStr = coordinates.join('\n');
                                        }
                                    }

                                    const rowData = [
                                        (index + 1).toString(),
                                        product.id || "—",
                                        product.productName || "—",
                                        product.productDescription || "—",
                                        product.productPrice || "—",
                                        product.status ? "Active" : "Inactive",
                                        product.ocopYearRelease || "—",
                                        product.ocopPoint || "—",
                                        product.ocopTypeId || "—",
                                        product.companyId || "—",
                                        product.createdAt ? new Date(product.createdAt).toLocaleString() : "—",
                                        product.updateAt ? new Date(product.updateAt).toLocaleString() : "—",
                                        product.tagId || "—",
                                        imagesStr,
                                        sellLocationsStr,
                                        coordinatesStr
                                    ];

                                    data.push(rowData);
                                });

                                // Create worksheet from data
                                const ws = XLSX.utils.aoa_to_sheet(data);

                                // Set column widths for better readability
                                ws['!cols'] = [
                                    { wch: 5 },    // #
                                    { wch: 25 },   // Product ID
                                    { wch: 30 },   // Product Name
                                    { wch: 60 },   // Product Description
                                    { wch: 15 },   // Product Price
                                    { wch: 10 },   // Status
                                    { wch: 15 },   // OCOP Year Release
                                    { wch: 15 },   // OCOP Point
                                    { wch: 25 },   // OCOP Type ID
                                    { wch: 25 },   // Company ID
                                    { wch: 20 },   // Created At
                                    { wch: 20 },   // Updated At
                                    { wch: 25 },   // Tag ID
                                    { wch: 100 },  // Product Images
                                    { wch: 100 },  // Sell Locations
                                    { wch: 40 }    // Coordinates
                                ];

                                // Configure row heights to accommodate multiline text
                                const rowCount = data.length;
                                ws['!rows'] = [];
                                for (let i = 0; i < rowCount; i++) {
                                    ws['!rows'][i] = { hpt: 25 }; // Default row height
                                }

                                // Add the worksheet to the workbook
                                XLSX.utils.book_append_sheet(wb, ws, "OCOP Products");

                                // Generate Excel file and trigger download
                                const today = new Date().toISOString().slice(0, 10);
                                const fileName = `ocop_products_${today}.xlsx`;
                                XLSX.writeFile(wb, fileName);

                                showSuccessAlert("Export Successful", `${products.length} Items have been exported to Excel.`);
                            } catch (ex) {
                                console.error("Error during Excel creation:", ex);
                                showErrorAlert("Export Error", `Error creating Excel file: ${ex.message}`);
                            }
                        } else {
                            showErrorAlert("Export Error", "No OCOP product data available for export.");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("API Error Details:", status, error);
                        showErrorAlert("Export Error", "Could not retrieve product data. Please check your connection or permissions.");
                    }
                });
            }
        })();

        setTimeout(function () {
            var alert = document.getElementById("alert-message");
            if (alert) {
                alert.style.display = "none";
            }
        }, 1000);
    </script>
}
}

@section Styles {
    <style>
        .dropdown-toggle::after {
            display: none;
        }

        .ocop-dropdown-item {
            background-color: #0a3b26;
            color: white !important;
            transition: all 0.2s ease;
            margin-bottom: 2px;
            font-weight: 500;
        }

        .ocop-dropdown-item:hover {
            background-color: #072c1b !important;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.4);
            transform: translateY(-2px);
            color: #ffffff !important;
        }

        .dropdown-menu {
            background-color: #d4e9dd;
            border-radius: 8px;
            border: 1px solid #a3c9b3;
            padding: 0;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .dropdown-item {
            color: #032213 !important;
        }

        #createOcopDropdown {
            color: #ffffff;
            font-weight: 500;
            background-color: #0a3b26;
            border-color: #062318;
        }

        #createOcopDropdown:hover {
            background-color: #072c1b;
            border-color: #021d10;
        }
    </style>
}